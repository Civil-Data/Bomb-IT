name: Build and tests 🎮

on: [push, pull_request]

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  testAllModes:
    name: Test in ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - playmode
          # - editmode
          
    permissions: write-all
    
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          lfs: true
      - uses: actions/cache@v3.2.4
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-
      - uses: game-ci/unity-test-runner@v2.1.1
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
         # coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
      - uses: actions/upload-artifact@v3.1.2
        if: always()
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
     # - uses: actions/upload-artifact@v3.1.2
     #   if: always()
     #   with:
     #     name: Coverage results for ${{ matrix.testMode }}
     #     path: ${{ steps.tests.outputs.coveragePath }}

  super-lint:
      # Name the Job
      name: Lint code base
      # Set the type of machine to run on
      runs-on: ubuntu-latest
      
      permissions: write-all

      steps:
        - uses: actions/checkout@v3.3.0
       # - run: git pull
        - run: dotnet tool install -g dotnet-format
        - name: format
          run: dotnet-format -f Assets/ -v d
          working-directory: ${{env.working-directory}}
        - name: Commit changes
          uses: EndBug/add-and-commit@v9.1.1
          with:
            message: "[Bot] Automated dotnet-format update"
            add: "*.cs"
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  buildWindows:
      needs: testAllModes
      name: Build for Windows 🖥️
      runs-on: ubuntu-latest
      strategy:
        fail-fast: false
      steps:
        - name: Checkout code
          uses: actions/checkout@v3.3.0

        - name: Create LFS file list
          run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

        - name: Restore LFS cache
          uses: actions/cache@v3.2.4
          id: lfs-cache
          with:
            path: .git/lfs
            key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

        - name: Git LFS Pull
          run: |
            git lfs pull
            git add .
            git reset --hard
        - name: Restore Library cache
          uses: actions/cache@v3.2.4
          with:
            path: Library
            key: Library-build-StandaloneWindows64
            restore-keys: |
              Library-build-
              Library-
        - uses: game-ci/unity-builder@v2.1.2
          with:
            targetPlatform: StandaloneWindows64

        - uses: actions/upload-artifact@v3.1.2
          with:
            name: build-StandaloneWindows64
            path: build/StandaloneWindows64
